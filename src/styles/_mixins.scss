@import './variables';
@import './functions';

@mixin outline($color: $primary-color, $border: true) {
  z-index: 2;
  box-shadow: 0 #{$shadow-size} $shadow-size $shadow-color-light, 0 0 #{$shadow-size / 2} 1px $color;
  outline: none;

  @if $border {
    border-color: transparent;
  }
}

@mixin textoutline($color: $primary-color) {
  outline: none;
  text-shadow: 0 0 10px $color;
}

@mixin bottom-outline($color: $primary-color) {
  border-color: $color;
  z-index: 2;
  box-shadow: 1px 0 0 2px rgba($color, 0.4);
  outline: none;
}

@mixin scrollbar($color: $bg-color) {
  &::-webkit-scrollbar {
    height: 7px;
    width: 7px;
  }

  &::-webkit-scrollbar-track {
    background: $color;
  }

  &::-webkit-scrollbar-thumb {
    background: contrast($color, 2);
  }

  &:hover {
    &::-webkit-scrollbar-thumb {
      background: contrast($color, 3);
    }
  }
}

@mixin nowrap {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

@mixin yiq($color, $percetange: 90%) {
  background: $color;
  color: yiq($color, $percetange);
}

@mixin disabled($inside: false) {
  $opacity: 0.35;

  @if $inside {
    & > * {
      opacity: $opacity;
    }
  }

  @else {
    opacity: $opacity;
  }

  &,
  & * {
    cursor: not-allowed !important;
    user-select: none !important;
  }
}

@mixin fvButton($bg, $fg, $border: true) {
  background: $bg;
  color: $fg;

  @if $border {
    @include shadow(bottom);

    border: solid 1px contrast($bg, 2, hard-dark);
  }

  @else {
    border: none;
    box-shadow: none;
  }

  &:not([disabled]) {
    &:hover,
    &:focus {
      background: contrast($bg, 1, hard-light);
      transition-duration: 0;
    }

    &:active {
      @if $border {
        @include shadow(inset-bottom);
      }

      background: contrast($bg, 2, hard-dark);
      transition-duration: $transition-speed;
    }
  }

  &[disabled] {
    @include disabled;
  }
}

@mixin fvInput($bg) {
  @include yiq(contrast($bg, 1, force-light));
  @include shadow(bottom);

  border: solid 1px contrast($bg, 2, hard-dark);
  border-radius: $border-radius;
  font-family: inherit;
  position: relative;
  padding: 0 $padding-small;

  &:not([disabled]) {
    &:hover {
      border: solid 1px contrast($bg, 3, hard-dark);
    }

    &:focus,
    &[focus] {
      @include outline;

      &:invalid,
      &[invalid] {
        @include outline($danger-color);
      }
    }
  }

  &[disabled] {
    @include disabled;
  }

  &::placeholder,
  & > .placeholder {
    color: contrast($bg, 3, light);
  }
}

@mixin vue-animation($selector, $on, $static: false) {
  @if $static == true {
    &.#{$selector}-#{$on} {
      @content;
    }
  }

  @else if $on == enter {
    &.#{$selector}-enter-active,
    &.#{$selector}-leave-active {
      @content;
    }
  }

  @else if $on == leave {
    &.#{$selector}-enter,
    &.#{$selector}-leave-active {
      @content;
    }
  }
}

@mixin respond-to($media) {
  @if $media == all {
    @content;
  }

  @else if $media == xs {
    @media #{$media-xs} {
      @content;
    }
  }

  @else if $media == only-xs {
    @media #{$media-only-xs} {
      @content;
    }
  }

  @else if $media == lower-xs {
    @media #{$media-lower-xs} {
      @content;
    }
  }

  @else if $media == sm {
    @media #{$media-sm} {
      @content;
    }
  }

  @else if $media == only-sm {
    @media #{$media-only-sm} {
      @content;
    }
  }

  @else if $media == lower-sm {
    @media #{$media-lower-sm} {
      @content;
    }
  }

  @else if $media == md {
    @media #{$media-md} {
      @content;
    }
  }

  @else if $media == only-md {
    @media #{$media-only-md} {
      @content;
    }
  }

  @else if $media == lower-md {
    @media #{$media-lower-md} {
      @content;
    }
  }

  @else if $media == lg {
    @media #{$media-lg} {
      @content;
    }
  }

  @else if $media == only-lg {
    @media #{$media-only-lg} {
      @content;
    }
  }

  @else if $media == lower-lg {
    @media #{$media-lower-lg} {
      @content;
    }
  }

  @else if $media == xl {
    @media #{$media-xl} {
      @content;
    }
  }

  @else if $media == only-xl {
    @media #{$media-only-xl} {
      @content;
    }
  }

  @else if $media == lower-xl {
    @media #{$media-lower-xl} {
      @content;
    }
  }
}

@mixin shadow($to: bottom, $color: $shadow-color-light) {
  @if $to == bottom {
    box-shadow: 0 #{$shadow-size} $shadow-size $color;
  }

  @else if $to == inset-bottom {
    box-shadow: inset 0 #{$shadow-size} $shadow-size $color;
  }

  @else if $to == top {
    box-shadow: 0 #{-1 * $shadow-size} $shadow-size $color;
  }

  @else if $to == inset-top {
    box-shadow: inset 0 #{-1 * $shadow-size} $shadow-size $color;
  }

  @else if $to == right {
    box-shadow: #{$shadow-size} 0 $shadow-size $color;
  }

  @else if $to == inset-right {
    box-shadow: inset #{$shadow-size} 0 $shadow-size $color;
  }

  @else if $to == left {
    box-shadow: #{-1 * $shadow-size} 0 $shadow-size $color;
  }

  @else if $to == inset-left {
    box-shadow: inset #{-1 * $shadow-size} 0 $shadow-size $color;
  }

  @else if $to == all {
    box-shadow: 0 0 $shadow-size $color;
  }

  @else if $to == inset-all {
    box-shadow: inset 0 0 $shadow-size $color;
  }
}
